{"version":3,"sources":["../../app-es6+/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","name","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAOA,MAAAA,U;;;yBAEcC,a;AACjB,+BAAYC,UAAZ,EAAuB;AAAA;;AAClB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,aAAd;AACJ;;;;mCAEQC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,kBAAIC,OAAO,GAAG,KAAI,CAACN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,KAAI,CAACN,MAAN,CAA7B,EAA4C,WAA5C,EACTO,WADS,CACG,KAAI,CAACP,MADR,EAETQ,GAFS,CAELP,UAFK,CAAd;;AAIAI,cAAAA,OAAO,CAACI,SAAR,GAAoB,UAAAC,CAAC,EAAG;AACpBP,gBAAAA,OAAO;AACV,eAFD;;AAIAE,cAAAA,OAAO,CAACM,OAAR,GAAkB,UAAAD,CAAC,EAAG;AAClBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,IAA3B;AACAZ,gBAAAA,MAAM,CAAC,0CAAD,CAAN;AACH,eAHD;AAIH,aAbM,CAAP;AAcH;;;6CAEiB;AAAA;;AACd,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,kBAAIa,MAAM,GAAG,MAAI,CAAClB,WAAL,CAAiBO,WAAjB,CAA6B,MAAI,CAACN,MAAlC,EAA0C,UAA1C,EACRO,WADQ,CACI,MAAI,CAACP,MADT,EAERkB,UAFQ,EAAb;;AAIA,kBAAIC,WAAW,GAAG,EAAlB;;AAEAF,cAAAA,MAAM,CAACR,SAAP,GAAmB,UAAAC,CAAC,EAAG;AACnB,sBAAMU,KAAK,GAAGV,CAAC,CAACI,MAAF,CAASO,MAAvB;;AAEA,oBAAGD,KAAH,EAAS;AACL,wBAAME,IAAI,GAAGF,KAAK,CAACG,KAAnB;AACAJ,kBAAAA,WAAW,CAACK,IAAZ,CAAiB,IAAI5B,UAAJ,CAAe0B,IAAI,CAACG,KAApB,EAA2BH,IAAI,CAACI,WAAhC,EAA6CJ,IAAI,CAACK,MAAlD,CAAjB;AAEAP,kBAAAA,KAAK,CAACQ,QAAN;AACH,iBALD,MAKM;AACFzB,kBAAAA,OAAO,CAACgB,WAAD,CAAP;AACH;AACJ,eAXD;;AAaAF,cAAAA,MAAM,CAACN,OAAP,GAAiB,UAAAD,CAAC,EAAG;AACjBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,IAA3B;AACAZ,gBAAAA,MAAM,CAAC,yCAAD,CAAN;AACH,eAHD;AAIH,aAxBM,CAAP;AAyBH;;;8CAEkB;AAAA;;AACf,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,kBAAIC,OAAO,GAAG,MAAI,CAACN,WAAL,CAAiBO,WAAjB,CAA6B,MAAI,CAACN,MAAlC,EAA0C,WAA1C,EACTO,WADS,CACG,MAAI,CAACP,MADR,EAET6B,KAFS,EAAd;;AAIAxB,cAAAA,OAAO,CAACI,SAAR,GAAoB,UAAAC,CAAC,EAAG;AACpBP,gBAAAA,OAAO,CAAC,uBAAD,CAAP;AACH,eAFD;;AAIAE,cAAAA,OAAO,CAACM,OAAR,GAAkB,UAAAD,CAAC,EAAG;AAClBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,IAA3B;AACAZ,gBAAAA,MAAM,CAAC,yCAAD,CAAN;AACH,eAHD;AAIH,aAbM,CAAP;AAcH;AAED","sourcesContent":["import Negociacao from '../models/Negociacao.js'\n\nexport default class NegociacaoDao{\n    constructor(connection){\n         this._connection = connection\n         this._store = 'negociacoes'\n    }\n\n    adiciona(negociacao){\n        return new Promise((resolve, reject) =>{\n            let request = this._connection.transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao)\n\n            request.onsuccess = e =>{\n                resolve()\n            }\n\n            request.onerror = e =>{\n                console.log(e.target.error.name)\n                reject('Não foi possível adicionar a negociação.')\n            }\n        })\n    }\n\n    listaNegociacoes(){\n        return new Promise((resolve, reject) =>{\n            let cursor = this._connection.transaction(this._store, 'readonly')\n                .objectStore(this._store)\n                .openCursor()\n\n            let negociacoes = []\n\n            cursor.onsuccess = e =>{\n                const atual = e.target.result\n\n                if(atual){\n                    const dado = atual.value\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor))\n\n                    atual.continue()\n                } else{\n                    resolve(negociacoes)\n                }\n            }\n\n            cursor.onerror = e =>{\n                console.log(e.target.error.name)\n                reject('Não foi possível listar as negociações.')\n            }\n        })\n    }\n\n    apagarNegociacoes(){\n        return new Promise((resolve, reject) =>{\n            let request = this._connection.transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .clear()\n\n            request.onsuccess = e =>{\n                resolve('Negociações apagadas.')\n            }\n\n            request.onerror = e =>{\n                console.log(e.target.error.name)\n                reject('Não foi possível apagar as negociações.')\n            }\n        })\n    }\n\n    /*apagarNegociacao(negociacao){\n        return new Promise((resolve, reject) =>{\n            let request = this._connection.transaction(this._store, 'readwrite')\n            .objectStore(this._store)\n            .delete(negociacao)\n\n            request.onsuccess = e => resolve('Negociação apagada.')\n\n            request.onerror = e => reject(console.log(e.target.error.name)) \n        })\n    } */\n}"],"file":"NegociacaoDao.js"}